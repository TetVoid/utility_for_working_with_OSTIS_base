sc_node_norole_relation->concepts_fault_tolerance;;
sc_node_norole_relation->concepts_working_capacity;;

sc_node_not_relation->technical_system;;
sc_node_not_relation->component;;
sc_node_not_relation->component_failure;;
sc_node_not_relation->system;;
sc_node_not_relation->state;;

sc_node_not_relation->concepts_set;;
sc_node_not_relation->concepts_element;;
sc_node_norole_relation->concepts_set_of_performance;;

concepts_fault_tolerance=> concepts_main_idtf: [Отказоустойчивость*](*<- lang_ru;;*);;
concepts_fault_tolerance=> concepts_main_idtf: [fault tolerance*](*<- lang_en;;*);;
definition ->... 
(*
->rrel_key_sc_element: concepts_fault_tolerance;;
<= concepts_sc_text_translation: ...(*->rrel_example:[Отказоустойчивость — свойство технической системы сохранять свою работоспособность после отказа одного или нескольких составных компонентов.](*<-lang_ru;;*);;*);;
=> concepts_main_idtf: [Определение (Отказоустойчивость*)](*<- lang_ru;;*);;
=> concepts_using_constants:
{
technical_system;
concepts_working_capacity;
component
};;
*);;

statement ->...
(*
->rrel_key_sc_element:concepts_fault_tolerance;;
<= concepts_sc_text_translation: ...(*->rrel_example:[Отказоустойчивость определяется количеством любых последовательных единичных отказов компонентов, после которого сохраняется работоспособность системы в целом.](*<-lang_ru;;*);;*);;
=> concepts_main_idtf: [Утверждение(Отказоустойчивость*)](*<- lang_ru;;*);;
=> concepts_using_constants:
{ 
component_failure;
concepts_working_capacity;
system
};;
*);;


relation => concepts_inclusion: oriented_relation;; 
relation => concepts_inclusion: binary_relation;;
oriented_relation -> concepts_fault_tolerance;;
concepts_fault_tolerance => concepts_inclusion: antireflexive_relation;;
concepts_fault_tolerance => concepts_inclusion: antitransitive_relation;;
concepts_fault_tolerance => concepts_inclusion: antisymmetric_relation;; 
antireflexive_relation -> concepts_fault_tolerance;; 
antitransitive_relation -> concepts_fault_tolerance;;
antisymmetric_relation -> concepts_fault_tolerance;;


concepts_fault_tolerance => concepts_first_domain: system;;
concepts_fault_tolerance => concepts_second_domain: state;;
..union<=concepts_combination:
{
system;
state
};;
concepts_fault_tolerance => concepts_definitional_domain:..union;; 

arity->arity_2;;
arity_2=>concepts_measurement:2;;
arity_2->concepts_fault_tolerance;;
number->2;;

ostis<-system;;
yes<-state;;
ostis=>concepts_fault_tolerance:yes;;




















