sc_node_norole_relation->concepts_matrix_union;;
sc_node_norole_relation->concepts_union;;
sc_node_norole_relation->rrel_value;;
sc_node_norole_relation->concepts_third_domain;;

sc_node_role_relation->rrel_output_vector;;
sc_node_role_relation->rrel_input_vector;;
sc_node_role_relation->rrel_changes;;
sc_node_role_relation->rrel_end_of_range;;
sc_node_role_relation->rrel_begin_of_range;;

sc_node_not_relation->math_operation;;
sc_node_not_relation->matrix;;
sc_node_not_relation->matrix_element;;

concepts_matrix_union=> concepts_main_idtf: [матричное обьединение*](*<- lang_ru;;*);;
concepts_matrix_union=> concepts_main_idtf: [matrix union*](*<- lang_en;;*);;
definition ->... 
(*
->rrel_key_sc_element: concepts_matrix_union;;
<= concepts_sc_text_translation: ...(*->rrel_example:[Матричное обьединение являющиеся матиматической операцией ,на выходе которой получается матрица ,которая является обьединением двух исходных матриц.](*<-lang_ru;;*);;*);;
=> concepts_main_idtf: [Определение (матричное обьединение*)](*<- lang_ru;;*);;
=> concepts_using_constants:
{
math_operation;
matrix;
concepts_union
};;
*);;

statement ->...
(*
->rrel_key_sc_element:concepts_matrix_union;;
<= concepts_sc_text_translation: ...(*->rrel_example:[Конечная матрица содержит все элементы первой матрицы и элементы второй матрицы,которых нету в первой матрице.](*<-lang_ru;;*);;*);;
=> concepts_main_idtf: [Утверждение(матричное обьединение*)](*<- lang_ru;;*);;
=> concepts_using_constants:
{ 
matrix_element;
matrix
};;
*);;


relation => concepts_inclusion: oriented_relation;; 
relation => concepts_inclusion: quasybinary_relation;;
oriented_relation -> concepts_matrix_union;;
quasybinary_relation->concepts_matrix_union;;


concepts_matrix_union => concepts_first_domain:matrix;;
concepts_matrix_union => concepts_second_domain:matrix;;
concepts_matrix_union => concepts_third_domain:matrix;;
concepts_matrix_union => concepts_definitional_domain:matrix;; 

arity->arity_3;;
arity_3=>concepts_measurement:3;;
arity_3->concepts_matrix_union;;
concepts_number->3;;

..first<-matrix;;
..second<-matrix;;
..third<-matrix;;
..third<=concepts_matrix_union:{
..first;
..second
};;





















